<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="com.st.mybatis.mapper.OrderCustomMapper">

	<!--<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>-->
	<resultMap type="com.st.mybatis.po.Orders" id="OrderUserResultMap">
		<!-- 配置映射的订单信息 -->
		<!-- id：指定查询列中的唯 一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id
			column：订单信息的唯 一标识 列
			property：订单信息的唯 一标识 列所映射到Orders中哪个属性
		  -->
		<id column="id" property="id"></id>
		<result column="userid" property="userid"></result>
		<result column="numbers" property="numbers"></result>
		<result column="createtime" property="createtime"></result>
		<result column="note" property="note"></result>
		<!-- 配置映射的关联的用户信息 -->
		<!-- association：用于映射关联查询单个对象的信息
		property：要将关联查询的用户信息映射到Orders中哪个属性
		 -->
		<association property="user" javaType="com.st.mybatis.po.User">
			<!-- id：关联查询用户的唯 一标识
                        column：指定唯 一标识用户信息的列
                        javaType：映射到user的哪个属性
                         -->
			<id column="userid" property="id"/>
			<result column="username" property="username"/>
			<result column="sex" property="sex"/>
			<result column="address" property="address"/>
			<result column="birthday" property="birthday"/>
		</association>
	</resultMap>

	<resultMap type="com.st.mybatis.po.Orders" id="OrdersAndOrderDetailResultMap" extends="OrderUserResultMap">
		<collection property="orderdetails" ofType="com.st.mybatis.po.Orderdetail">
			<id column="orderdetailid" property="id"></id>
			<result column="itemsId" property="itemsId"/>
			<result column="itemsNum" property="itemsNum"/>
			<result column="ordersId" property="ordersId"/>
		</collection>
	</resultMap>

	<resultMap id="UserAndItemsResultMap" type="com.st.mybatis.po.User">
		<id column="userid" property="id"></id>
		<result column="username" property="username"></result>
		<result column="sex" property="sex"></result>
		<result column="address" property="address"></result>
		<collection property="ordersList" ofType="com.st.mybatis.po.Orders">
			<id column="id" property="id"></id>
			<result column="userid" property="userid"></result>
			<result column="numbers" property="numbers"></result>
			<result column="createtime" property="createtime"></result>
			<result column="note" property="note"></result>
			<collection property="orderdetails" ofType="com.st.mybatis.po.Orderdetail">
				<id column="orderdetailid" property="id"></id>
				<result column="itemsId" property="itemsId"/>
				<result column="itemsNum" property="itemsNum"/>
				<result column="ordersId" property="ordersId"/>
				<association property="items" javaType="com.st.mybatis.po.Items">
					<id column="itemsid" property="id"></id>
					<result column="names" property="names"/>
					<result column="detail" property="detail"/>
					<result column="price" property="price"/>
				</association>
			</collection>
		</collection>
	</resultMap>


	<select id="findOrderCustomList" parameterType="java.lang.String" resultType="com.st.mybatis.po.OrderCustom">
		SELECT
		orders.*,
		USERT.username,
		USERT.sex,
		USERT.address
		FROM
		orders,
		USERT
		WHERE orders.userid = USERT.id
		AND orders.userid = #{VALUE}
	</select>
	<select id="findOrderCustomListResultMap" parameterType="java.lang.String" resultMap="OrderUserResultMap">
		SELECT
		orders.*,
		USERT.username,
		USERT.sex,
		USERT.address
		FROM
		orders,
		USERT
		WHERE orders.userid = USERT.id
		AND orders.userid = #{VALUE}
	</select>

	<select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
		SELECT orders.*,
				USERT.username,
				USERT.sex,
				USERT.address,
				orderdetail.id orderdetailid,
				orderdetail.itemsid,
				orderdetail.itemsnum
	    FROM orders, USERT, orderdetail
	    WHERE orders.userid = USERT.id
		AND orders.id = orderdetail.ordersid
		AND orders.userid = #{VALUE}
	</select>
	<select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
		SELECT orders.*,
				USERT.username,
				USERT.sex,
				USERT.address,
				orderdetail.id orderdetailId,
				orderdetail.itemsid,
				orderdetail.itemsnum,
        items.names,
        items.detail,
        items.price
	    FROM orders, USERT, orderdetail,items
	    WHERE orders.userid = USERT.id
		AND orders.id = orderdetail.ordersid
    AND orderdetail.itemsid = items.id
		AND orders.userid = #{VALUE}
	</select>

	<resultMap id="OrdersUserLazyLoadingResultMap" type="com.st.mybatis.po.Orders">
		<!--对订单信息进行映射配置  -->
		<id column="id" property="id"></id>
		<result column="userid" property="userid"></result>
		<result column="numbers" property="numbers"></result>
		<result column="createtime" property="createtime"></result>
		<result column="note" property="note"></result>
		<!-- 实现对用户信息进行延迟加载
                    select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
                    要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询，如果findUserById不在本mapper中需要前边加namespace
                    column：订单信息中关联用户信息查询的列，是user_id
                    关联查询的sql理解为：
                    SELECT orders.*,
            (SELECT username FROM USER WHERE orders.user_id = user.id)username,
            (SELECT sex FROM USER WHERE orders.user_id = user.id)sex
             FROM orders
                     -->
		<association property="user" javaType="com.st.mybatis.po.User" select="findUserLazyByIdLoading" column="userid">
		</association>

	</resultMap>
	<!-- 查询订单关联查询用户，用户信息需要延迟加载 -->
	<select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoadingResultMap">
		SELECT * FROM orders
	</select>
	<select id="findUserLazyByIdLoading" parameterType="java.lang.String" resultType="com.st.mybatis.po.User">
		SELECT * FROM usert where id = #{value}
	</select>
</mapper>


